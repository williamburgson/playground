// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: proto/queue.proto

package queue

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Queue_AddTask_FullMethodName    = "/queue.Queue/AddTask"
	Queue_WatchQueue_FullMethodName = "/queue.Queue/WatchQueue"
)

// QueueClient is the client API for Queue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueueClient interface {
	AddTask(ctx context.Context, in *TaskAddRequest, opts ...grpc.CallOption) (*TaskAddReply, error)
	WatchQueue(ctx context.Context, in *TaskWatchRequest, opts ...grpc.CallOption) (Queue_WatchQueueClient, error)
}

type queueClient struct {
	cc grpc.ClientConnInterface
}

func NewQueueClient(cc grpc.ClientConnInterface) QueueClient {
	return &queueClient{cc}
}

func (c *queueClient) AddTask(ctx context.Context, in *TaskAddRequest, opts ...grpc.CallOption) (*TaskAddReply, error) {
	out := new(TaskAddReply)
	err := c.cc.Invoke(ctx, Queue_AddTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueClient) WatchQueue(ctx context.Context, in *TaskWatchRequest, opts ...grpc.CallOption) (Queue_WatchQueueClient, error) {
	stream, err := c.cc.NewStream(ctx, &Queue_ServiceDesc.Streams[0], Queue_WatchQueue_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &queueWatchQueueClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Queue_WatchQueueClient interface {
	Recv() (*TaskWatchReply, error)
	grpc.ClientStream
}

type queueWatchQueueClient struct {
	grpc.ClientStream
}

func (x *queueWatchQueueClient) Recv() (*TaskWatchReply, error) {
	m := new(TaskWatchReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QueueServer is the server API for Queue service.
// All implementations must embed UnimplementedQueueServer
// for forward compatibility
type QueueServer interface {
	AddTask(context.Context, *TaskAddRequest) (*TaskAddReply, error)
	WatchQueue(*TaskWatchRequest, Queue_WatchQueueServer) error
	mustEmbedUnimplementedQueueServer()
}

// UnimplementedQueueServer must be embedded to have forward compatible implementations.
type UnimplementedQueueServer struct {
}

func (UnimplementedQueueServer) AddTask(context.Context, *TaskAddRequest) (*TaskAddReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTask not implemented")
}
func (UnimplementedQueueServer) WatchQueue(*TaskWatchRequest, Queue_WatchQueueServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchQueue not implemented")
}
func (UnimplementedQueueServer) mustEmbedUnimplementedQueueServer() {}

// UnsafeQueueServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueueServer will
// result in compilation errors.
type UnsafeQueueServer interface {
	mustEmbedUnimplementedQueueServer()
}

func RegisterQueueServer(s grpc.ServiceRegistrar, srv QueueServer) {
	s.RegisterService(&Queue_ServiceDesc, srv)
}

func _Queue_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Queue_AddTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).AddTask(ctx, req.(*TaskAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queue_WatchQueue_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TaskWatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueueServer).WatchQueue(m, &queueWatchQueueServer{stream})
}

type Queue_WatchQueueServer interface {
	Send(*TaskWatchReply) error
	grpc.ServerStream
}

type queueWatchQueueServer struct {
	grpc.ServerStream
}

func (x *queueWatchQueueServer) Send(m *TaskWatchReply) error {
	return x.ServerStream.SendMsg(m)
}

// Queue_ServiceDesc is the grpc.ServiceDesc for Queue service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Queue_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "queue.Queue",
	HandlerType: (*QueueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTask",
			Handler:    _Queue_AddTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchQueue",
			Handler:       _Queue_WatchQueue_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/queue.proto",
}
